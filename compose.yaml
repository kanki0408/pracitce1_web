services:
  web:
    #dockerfileの場所を指定
    build: .
    #ホスト側ポートと、コンテナ側のポートを接続する設定になります
    ports:
      - "5000:5000"
    #環境変数の設定
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
    #ホストPC内にあるリソース（主に変更のかかるソースファイルなど）をコンテナ内に共有できます
    volumes:
      - ./:/app
  
  # MySQLサービスの設定
  mysql:
    #Dockerfileがない時のbuildの代わり
    image: mysql:8.0
    container_name: mysql
    #コンテナ停止しても常に再起動する
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root_password  # ここにMySQLのrootパスワードを設定
      MYSQL_DATABASE: your_database       # 作成するデータベース名
      MYSQL_USER: your_user               # データベースのユーザー名
      MYSQL_PASSWORD: your_user_password  # ユーザーのパスワード
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"

  # phpMyAdminサービスの設定
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: root_password  # MySQLのrootパスワードと同じものを設定
    ports:
      - "8080:80"
    #mysqlが起動した後に起動する
    depends_on:
      - mysql

#コンテナ外のvolumesのストレージ
# メリット:
# コンテナないだけでバージョンを指定しまうと一々作り変える必要が出てきてしまうが、
# コンテナ外でスペースを作ることで、コンテナを新しくしてもデータを維持できる。
volumes:
  mysql_data:
    driver: local
